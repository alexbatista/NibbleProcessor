// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2016 16:48:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mux3_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux3_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] M1;
reg [7:0] M2;
reg [7:0] M3;
reg [1:0] SEL;
// wires                                               
wire [7:0] MOUT;

// assign statements (if any)                          
Mux3_1 i1 (
// port map - connection between master ports and signals/registers   
	.M1(M1),
	.M2(M2),
	.M3(M3),
	.MOUT(MOUT),
	.SEL(SEL)
);
initial 
begin 
#1000000 $finish;
end 
// M1[ 7 ]
initial
begin
	M1[7] = 1'b0;
	M1[7] = #100000 1'b1;
	M1[7] = #50000 1'b0;
	M1[7] = #150000 1'b1;
	M1[7] = #50000 1'b0;
	M1[7] = #100000 1'b1;
	M1[7] = #100000 1'b0;
	M1[7] = #150000 1'b1;
	M1[7] = #100000 1'b0;
	M1[7] = #50000 1'b1;
	M1[7] = #50000 1'b0;
end 
// M1[ 6 ]
initial
begin
	M1[6] = 1'b1;
	M1[6] = #100000 1'b0;
	M1[6] = #50000 1'b1;
	M1[6] = #100000 1'b0;
	M1[6] = #50000 1'b1;
	M1[6] = #50000 1'b0;
	M1[6] = #50000 1'b1;
	M1[6] = #200000 1'b0;
	M1[6] = #50000 1'b1;
	M1[6] = #200000 1'b0;
	M1[6] = #100000 1'b1;
end 
// M1[ 5 ]
initial
begin
	M1[5] = 1'b0;
	M1[5] = #100000 1'b1;
	M1[5] = #100000 1'b0;
	M1[5] = #150000 1'b1;
	M1[5] = #50000 1'b0;
	M1[5] = #100000 1'b1;
	M1[5] = #100000 1'b0;
	M1[5] = #100000 1'b1;
	M1[5] = #50000 1'b0;
	M1[5] = #50000 1'b1;
	M1[5] = #50000 1'b0;
end 
// M1[ 4 ]
initial
begin
	M1[4] = 1'b1;
	M1[4] = #50000 1'b0;
	M1[4] = #50000 1'b1;
	M1[4] = #150000 1'b0;
	M1[4] = #100000 1'b1;
	M1[4] = #50000 1'b0;
	M1[4] = #50000 1'b1;
	M1[4] = #100000 1'b0;
	M1[4] = #100000 1'b1;
	M1[4] = #100000 1'b0;
	M1[4] = #50000 1'b1;
	M1[4] = #150000 1'b0;
end 
// M1[ 3 ]
initial
begin
	M1[3] = 1'b0;
	M1[3] = #50000 1'b1;
	M1[3] = #100000 1'b0;
	M1[3] = #100000 1'b1;
	M1[3] = #50000 1'b0;
	M1[3] = #50000 1'b1;
	M1[3] = #50000 1'b0;
	M1[3] = #50000 1'b1;
	M1[3] = #50000 1'b0;
	M1[3] = #50000 1'b1;
	M1[3] = #300000 1'b0;
end 
// M1[ 2 ]
initial
begin
	M1[2] = 1'b0;
	M1[2] = #50000 1'b1;
	M1[2] = #50000 1'b0;
	M1[2] = #100000 1'b1;
	M1[2] = #50000 1'b0;
	M1[2] = #50000 1'b1;
	M1[2] = #100000 1'b0;
	M1[2] = #50000 1'b1;
	M1[2] = #50000 1'b0;
	M1[2] = #100000 1'b1;
	M1[2] = #200000 1'b0;
	M1[2] = #150000 1'b1;
end 
// M1[ 1 ]
initial
begin
	M1[1] = 1'b1;
	M1[1] = #350000 1'b0;
	M1[1] = #50000 1'b1;
	M1[1] = #300000 1'b0;
	M1[1] = #100000 1'b1;
	M1[1] = #50000 1'b0;
	M1[1] = #100000 1'b1;
end 
// M1[ 0 ]
initial
begin
	M1[0] = 1'b0;
	M1[0] = #50000 1'b1;
	M1[0] = #300000 1'b0;
	M1[0] = #50000 1'b1;
	M1[0] = #250000 1'b0;
	M1[0] = #50000 1'b1;
	M1[0] = #100000 1'b0;
	M1[0] = #100000 1'b1;
end 
// M2[ 7 ]
initial
begin
	M2[7] = 1'b0;
	M2[7] = #50000 1'b1;
	M2[7] = #50000 1'b0;
	M2[7] = #50000 1'b1;
	M2[7] = #150000 1'b0;
	M2[7] = #200000 1'b1;
	M2[7] = #150000 1'b0;
	M2[7] = #100000 1'b1;
	M2[7] = #150000 1'b0;
end 
// M2[ 6 ]
initial
begin
	M2[6] = 1'b1;
	M2[6] = #200000 1'b0;
	M2[6] = #50000 1'b1;
	M2[6] = #100000 1'b0;
	M2[6] = #100000 1'b1;
	M2[6] = #50000 1'b0;
	M2[6] = #100000 1'b1;
	M2[6] = #100000 1'b0;
	M2[6] = #50000 1'b1;
	M2[6] = #100000 1'b0;
	M2[6] = #50000 1'b1;
end 
// M2[ 5 ]
initial
begin
	M2[5] = 1'b1;
	M2[5] = #100000 1'b0;
	M2[5] = #100000 1'b1;
	M2[5] = #50000 1'b0;
	M2[5] = #100000 1'b1;
	M2[5] = #100000 1'b0;
	M2[5] = #50000 1'b1;
	M2[5] = #50000 1'b0;
	M2[5] = #50000 1'b1;
	M2[5] = #50000 1'b0;
	M2[5] = #100000 1'b1;
	M2[5] = #50000 1'b0;
	M2[5] = #50000 1'b1;
	M2[5] = #50000 1'b0;
	M2[5] = #50000 1'b1;
end 
// M2[ 4 ]
initial
begin
	M2[4] = 1'b1;
	M2[4] = #250000 1'b0;
	M2[4] = #50000 1'b1;
	M2[4] = #100000 1'b0;
	M2[4] = #50000 1'b1;
	M2[4] = #150000 1'b0;
	M2[4] = #150000 1'b1;
	M2[4] = #50000 1'b0;
	M2[4] = #100000 1'b1;
end 
// M2[ 3 ]
initial
begin
	M2[3] = 1'b0;
	M2[3] = #150000 1'b1;
	M2[3] = #100000 1'b0;
	M2[3] = #50000 1'b1;
	M2[3] = #50000 1'b0;
	M2[3] = #100000 1'b1;
	M2[3] = #150000 1'b0;
	M2[3] = #100000 1'b1;
	M2[3] = #50000 1'b0;
	M2[3] = #100000 1'b1;
end 
// M2[ 2 ]
initial
begin
	M2[2] = 1'b0;
	M2[2] = #50000 1'b1;
	M2[2] = #50000 1'b0;
	M2[2] = #50000 1'b1;
	M2[2] = #50000 1'b0;
	M2[2] = #50000 1'b1;
	M2[2] = #50000 1'b0;
	M2[2] = #250000 1'b1;
	M2[2] = #50000 1'b0;
	M2[2] = #150000 1'b1;
end 
// M2[ 1 ]
initial
begin
	M2[1] = 1'b0;
	M2[1] = #250000 1'b1;
	M2[1] = #50000 1'b0;
	M2[1] = #200000 1'b1;
	M2[1] = #150000 1'b0;
	M2[1] = #50000 1'b1;
	M2[1] = #50000 1'b0;
	M2[1] = #50000 1'b1;
	M2[1] = #150000 1'b0;
end 
// M2[ 0 ]
initial
begin
	M2[0] = 1'b1;
	M2[0] = #100000 1'b0;
	M2[0] = #50000 1'b1;
	M2[0] = #150000 1'b0;
	M2[0] = #100000 1'b1;
	M2[0] = #150000 1'b0;
	M2[0] = #50000 1'b1;
	M2[0] = #50000 1'b0;
	M2[0] = #50000 1'b1;
	M2[0] = #50000 1'b0;
	M2[0] = #150000 1'b1;
end 
// M3[ 7 ]
initial
begin
	M3[7] = 1'b1;
	M3[7] = #50000 1'b0;
	M3[7] = #50000 1'b1;
	M3[7] = #300000 1'b0;
	M3[7] = #50000 1'b1;
	M3[7] = #300000 1'b0;
	M3[7] = #100000 1'b1;
	M3[7] = #100000 1'b0;
end 
// M3[ 6 ]
initial
begin
	M3[6] = 1'b1;
	M3[6] = #100000 1'b0;
	M3[6] = #100000 1'b1;
	M3[6] = #50000 1'b0;
	M3[6] = #100000 1'b1;
	M3[6] = #50000 1'b0;
	M3[6] = #100000 1'b1;
	M3[6] = #100000 1'b0;
	M3[6] = #150000 1'b1;
	M3[6] = #50000 1'b0;
	M3[6] = #50000 1'b1;
	M3[6] = #100000 1'b0;
end 
// M3[ 5 ]
initial
begin
	M3[5] = 1'b1;
	M3[5] = #100000 1'b0;
	M3[5] = #250000 1'b1;
	M3[5] = #100000 1'b0;
	M3[5] = #150000 1'b1;
	M3[5] = #50000 1'b0;
	M3[5] = #50000 1'b1;
	M3[5] = #50000 1'b0;
	M3[5] = #50000 1'b1;
	M3[5] = #50000 1'b0;
	M3[5] = #100000 1'b1;
end 
// M3[ 4 ]
initial
begin
	M3[4] = 1'b0;
	M3[4] = #50000 1'b1;
	M3[4] = #50000 1'b0;
	M3[4] = #50000 1'b1;
	M3[4] = #50000 1'b0;
	M3[4] = #200000 1'b1;
	M3[4] = #50000 1'b0;
	M3[4] = #100000 1'b1;
	M3[4] = #100000 1'b0;
	M3[4] = #50000 1'b1;
	M3[4] = #50000 1'b0;
	M3[4] = #150000 1'b1;
end 
// M3[ 3 ]
initial
begin
	M3[3] = 1'b0;
	M3[3] = #200000 1'b1;
	M3[3] = #150000 1'b0;
	M3[3] = #100000 1'b1;
	M3[3] = #50000 1'b0;
	M3[3] = #50000 1'b1;
	M3[3] = #50000 1'b0;
	M3[3] = #100000 1'b1;
	M3[3] = #100000 1'b0;
	M3[3] = #50000 1'b1;
	M3[3] = #50000 1'b0;
end 
// M3[ 2 ]
initial
begin
	M3[2] = 1'b0;
	M3[2] = #50000 1'b1;
	M3[2] = #50000 1'b0;
	M3[2] = #200000 1'b1;
	M3[2] = #100000 1'b0;
	M3[2] = #50000 1'b1;
	M3[2] = #50000 1'b0;
	M3[2] = #50000 1'b1;
	M3[2] = #150000 1'b0;
end 
// M3[ 1 ]
initial
begin
	M3[1] = 1'b1;
	M3[1] = #50000 1'b0;
	M3[1] = #50000 1'b1;
	M3[1] = #150000 1'b0;
	M3[1] = #50000 1'b1;
	M3[1] = #100000 1'b0;
	M3[1] = #150000 1'b1;
	M3[1] = #50000 1'b0;
	M3[1] = #50000 1'b1;
	M3[1] = #200000 1'b0;
	M3[1] = #100000 1'b1;
end 
// M3[ 0 ]
initial
begin
	M3[0] = 1'b1;
	M3[0] = #300000 1'b0;
	M3[0] = #50000 1'b1;
	M3[0] = #150000 1'b0;
	M3[0] = #100000 1'b1;
	M3[0] = #100000 1'b0;
	M3[0] = #100000 1'b1;
	M3[0] = #100000 1'b0;
	M3[0] = #50000 1'b1;
end 
// SEL[ 1 ]
always
begin
	SEL[1] = 1'b0;
	SEL[1] = #20000 1'b1;
	#20000;
end 
// SEL[ 0 ]
always
begin
	SEL[0] = 1'b0;
	SEL[0] = #10000 1'b1;
	#10000;
end 
endmodule

