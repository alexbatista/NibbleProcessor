// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "11/03/2016 22:36:38"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Register5Bits (
	REGOUT,
	RESET,
	CLK,
	EN,
	REGIN);
output 	[4:0] REGOUT;
input 	RESET;
input 	CLK;
input 	EN;
input 	[4:0] REGIN;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \REGOUT[4]~output_o ;
wire \REGOUT[3]~output_o ;
wire \REGOUT[2]~output_o ;
wire \REGOUT[1]~output_o ;
wire \REGOUT[0]~output_o ;
wire \CLK~input_o ;
wire \REGIN[4]~input_o ;
wire \RESET~input_o ;
wire \EN~input_o ;
wire \inst~q ;
wire \REGIN[3]~input_o ;
wire \inst1~q ;
wire \REGIN[2]~input_o ;
wire \inst2~q ;
wire \REGIN[1]~input_o ;
wire \inst3~q ;
wire \REGIN[0]~input_o ;
wire \inst4~q ;


cyclonev_io_obuf \REGOUT[4]~output (
	.i(\inst~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\REGOUT[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \REGOUT[4]~output .bus_hold = "false";
defparam \REGOUT[4]~output .open_drain_output = "false";
defparam \REGOUT[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \REGOUT[3]~output (
	.i(\inst1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\REGOUT[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \REGOUT[3]~output .bus_hold = "false";
defparam \REGOUT[3]~output .open_drain_output = "false";
defparam \REGOUT[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \REGOUT[2]~output (
	.i(\inst2~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\REGOUT[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \REGOUT[2]~output .bus_hold = "false";
defparam \REGOUT[2]~output .open_drain_output = "false";
defparam \REGOUT[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \REGOUT[1]~output (
	.i(\inst3~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\REGOUT[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \REGOUT[1]~output .bus_hold = "false";
defparam \REGOUT[1]~output .open_drain_output = "false";
defparam \REGOUT[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \REGOUT[0]~output (
	.i(\inst4~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\REGOUT[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \REGOUT[0]~output .bus_hold = "false";
defparam \REGOUT[0]~output .open_drain_output = "false";
defparam \REGOUT[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \CLK~input (
	.i(CLK),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\CLK~input_o ));
// synopsys translate_off
defparam \CLK~input .bus_hold = "false";
defparam \CLK~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \REGIN[4]~input (
	.i(REGIN[4]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\REGIN[4]~input_o ));
// synopsys translate_off
defparam \REGIN[4]~input .bus_hold = "false";
defparam \REGIN[4]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \RESET~input (
	.i(RESET),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\RESET~input_o ));
// synopsys translate_off
defparam \RESET~input .bus_hold = "false";
defparam \RESET~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \EN~input (
	.i(EN),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\EN~input_o ));
// synopsys translate_off
defparam \EN~input .bus_hold = "false";
defparam \EN~input .simulate_z_as = "z";
// synopsys translate_on

dffeas inst(
	.clk(\CLK~input_o ),
	.d(\REGIN[4]~input_o ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\EN~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst.is_wysiwyg = "true";
defparam inst.power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \REGIN[3]~input (
	.i(REGIN[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\REGIN[3]~input_o ));
// synopsys translate_off
defparam \REGIN[3]~input .bus_hold = "false";
defparam \REGIN[3]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas inst1(
	.clk(\CLK~input_o ),
	.d(\REGIN[3]~input_o ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\EN~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst1.is_wysiwyg = "true";
defparam inst1.power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \REGIN[2]~input (
	.i(REGIN[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\REGIN[2]~input_o ));
// synopsys translate_off
defparam \REGIN[2]~input .bus_hold = "false";
defparam \REGIN[2]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas inst2(
	.clk(\CLK~input_o ),
	.d(\REGIN[2]~input_o ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\EN~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst2~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst2.is_wysiwyg = "true";
defparam inst2.power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \REGIN[1]~input (
	.i(REGIN[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\REGIN[1]~input_o ));
// synopsys translate_off
defparam \REGIN[1]~input .bus_hold = "false";
defparam \REGIN[1]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas inst3(
	.clk(\CLK~input_o ),
	.d(\REGIN[1]~input_o ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\EN~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst3~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst3.is_wysiwyg = "true";
defparam inst3.power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \REGIN[0]~input (
	.i(REGIN[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\REGIN[0]~input_o ));
// synopsys translate_off
defparam \REGIN[0]~input .bus_hold = "false";
defparam \REGIN[0]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas inst4(
	.clk(\CLK~input_o ),
	.d(\REGIN[0]~input_o ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\EN~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst4~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst4.is_wysiwyg = "true";
defparam inst4.power_up = "low";
// synopsys translate_on

assign REGOUT[4] = \REGOUT[4]~output_o ;

assign REGOUT[3] = \REGOUT[3]~output_o ;

assign REGOUT[2] = \REGOUT[2]~output_o ;

assign REGOUT[1] = \REGOUT[1]~output_o ;

assign REGOUT[0] = \REGOUT[0]~output_o ;

endmodule
